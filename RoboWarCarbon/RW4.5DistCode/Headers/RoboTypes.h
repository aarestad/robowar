/* Types.h */#define _H_Types/* This file declares all the types and constants used in RoboWar *//* Constants *//* C constants */#ifndef NULL	#define NULL			0L	#define EOF				(-1)#endif/* Macintosh Trap Numbers */#define _Unimplemented  0xA89F#define _WaitNextEvent  0xA860#define _InitGraf		0xA86E#define _Gestalt		0xA1AD/* Resource IDs */#define	WindowID		1000			/* myWindow resource */#define StopAlertID		1000			/* fatal error Alert resource */#define AlertID			1001			/* normal alert resource */#define BugAlertID		1002			/* For robot errors */#define ErrAlertID		1003			/* For memory / resource errors */#define Rob1PictID		1005			/* Robot 1 */#define Rob2PictID		1006			/* Robot 2 */#define Bullet1PictID	1007			/* Bullet1 */#define Bullet2PictID	1008			/* Bullet2 */#define TitleDlogID		1000			/* Title screen */#define PasswordDlogID	1002			/* Password stuff */#define CompilerDlogID	1003			/* Compiler messages */#define FindDlogID  	1004			/* Find stuff */#define	ReplaceDlogID	1005			/* Replace stuff */#define	AboutDlogID		1006			/* New About Dialog */#define TournDlogID		1007			/* Tournament */#define PrintDlogID		1008			/* Print command */#define RegisterDlogID	1009			/* Register command */#define PointsDlogID	1010			/* Set Max Points command */#define MRBDlogID		1011			/* MRB Dialog */#define BugDlogID		1013			/* Buggy robot */#define HistoryDlogID	1014			/* History dialog */#define ScrollID		1001			/* Drafting Board's scroll bar */#define GoID			1002			/* Debugger go button */#define PauseID			1003			/* Debugger pause button */#define StepID			1004			/* Debugger step button */#define ChrononID		1005			/* Debugger chronon button */#define	BattleID		1006			/* Arena single battle button */#define GunSndID		1000			/* Sound of Gun */#define MissileSndID	1001			/* Sound of Missile */#define BangSndID		1002			/* Sound of exploding TacNuke, Bullet, or Mine */#define LaserSndID		1003			/* Sound of Laser */#define HellSndID		1004			/* Sound of Hellbore */#define MineSndID		1005			/* Sound of Mine begin laid */#define DroneSndID		1006			/* Sound of Drone */#define ExplosionSndID	1007			/* Sound of robot exploding */#define CollisionSndID	1008			/* Sound of robot colliding */#define ShotHitSndID	1009			/* Sound of weapon hitting robot */#define SoundID			2000			/* Custom sounds on Robots */#define DeathSnd		0#define	CollisionSnd	1#define ShieldHitSnd	2#define HitSnd			3#define radioRefCon		0x42424242		/* RefCon for hardware radio button */#define checkRefCon		0x24242424		/* RefCon for hardware check box */#define susieIcon		259 			/* Icon for undocumented feature */#define bugIcon			260#define playIcon		261				/* Icons for Recording Studio */#define recordIcon		262#define	kNumOfMenus		9				// number of menu's#define appleMenuID		1000			/* Apple Menu */#define fileMenuID		1001			/* File Menu */#define editMenuID		1002			/* Edit Menu */#define viewMenuID		1003			/* View Menu */#define arenaMenuID		1004			/* Arena Menu */#define speedMenuID		128				/* Arena: Speed Menu */#define displayMenuID	129				/* Arena: Display Menu */#define historyMenuID	130				/* Arena: History Menu */#define toolsMenuID		3000			/* IconFactory Tools Menu*/ //--- 19 apr 97#define about_			1				/* Apple: About */#define help_			2				/* Apple: Help */#define new_			1				/* File: New */#define open_			2				/* File: Open */#define	duplicate_		3				/* File: Duplicate */#define saveAs_			4				/* File: Save As */#define close_			5				/* File: Close */#define pageSetup_		7				/* File: Page Setup */#define print_			8				/* File: Print *//* #define register_	10				 File: Register */#define quit_			/*12*/ 10		/* File: Quit */#define undo_			1				/* Edit: Undo */#define cut_			3				/* Edit: Cut */#define copy_			4				/* Edit: Copy */#define paste_			5				/* Edit: Paste */#define clear_			6				/* Edit: Clear */#define selectAll_		8				/* Edit: Find */#define find_			10				/* Edit: Find */#define findNext_		11				/* Edit: Find Next */#define replace_		12				/* Edit: Replace */#define	replaceFind_	13				/* Edit: Replace & Find Next */#define preferences_	15				// Edit: Preferences#define rules_			16				// Edit: Rules#define arena_			1				/* View: Arena */#define draftingBoard_	3				/* View: Drafting Board */#define	hardwareStore_	4				/* View: Hardware Store */#define iconFactory_	5				/* View: Icon Factory */#define recordingStudio_ 6				/* View: Recording Studio */#define	compile_		8				/* View: Compile */#define setPassword_	10				/* View: Set Password */#define teamNone_		1				/* Arena: No Team */#define teamOne_		2				/* Arena: Team 1 */#define teamTwo_		3				/* Arena: Team 2 */#define teamThree_		4				/* Arena: Team 3 */#define	debugger_		5				/* Arena: Use Debugger */#define sound_			7				/* Arena: Don't Play Sound */#define	show_			8				/* Arena: Display > */#define speed_			9				/* Arena: Speed > */#define historyMenu_	10				/* Arena: history > */#define setMaxPoints_	11				/* Arena: Set Max Points... */#define automate_		13				/* Arena: Tournament... */#define fast_			1				/* Arena: Speed: Fast */#define normal_			2				/* Arena: Speed: Normal */#define slow_			3				/* Arena: Speed: Slow */#define slower_			4				/* Arena: Speed: Slower */#define slowest_		5				/* Arena: Speed: Slowest */#define showHistory_	1				/* Arena: History: Show */#define clearHistory_	2				/* Arena: History: Clear */#define softwareDateID	1000#define hardwareDateID 	1001#define asmDateID		1002#define iconDateID		1003#define recordingDateID	1004#define codeLengthID	1000#define robotCodeID		1000#define hardwareInfoID	1000#define	passwordID		1000#define selectStartID	1000#define selectEndID		1001#define turretTypeID	1000#define shieldlessID	1000/* Interface Constants */#define iconRowHeight 	36#define iconLeftEdge	360#define kIconCheckBoxesQty 5//--- 19 apr 97 --- the rect for the color box.#define		kColorBoxRect_left		310#define		kColorBoxRect_right		340#define		kColorBoxRect_top		210#define		kColorBoxRect_bottom	240/* Development System Constants */#define	draftingBoard	1#define hardwareStore	2#define arena			5#define iconFactory		6#define recordingStudio 4#define radius			10				/* Radius of robot */#define radiusSquared	100				/* radius * radius */#define maxBots			6				/* Maximum number of bots in game */#define boardSize		300				/* Size of arena */#define progMaxSize		5000			/* The max size of the program */#define maxNonCountingIntr 1000			// the max number of non-counting intructions ie icnX and sndX#define libSize			400				/* The max size of the label lib */#define labelBaseCode	30000#define tokSize			100				/* The max size of a single token */#define stackSize		100				/* Size of robot's internal stack */#define historySize		50				/* Number of history registers *///#define kDestHeight 	297				/* Pixels shown in Drafting Board vertically*/#define viewHeight 		297				/* Pixels shown in Drafting Board vertically*/#define numRadio 		23				/* Number of Radio buttons in Hardware store */#define numCheck 		7				/* Number of check boxes in Hardware store */#define maxChannels		6				/* Number of sound channels in Recording Studio */#define radToDeg		57.2957795131  	/* 360/2¹ */#define gun				1				/* Types of shots */#define	missile			2#define tacNuke			3#define explode			4#define bigExplode		5#define hellBore		6#define mine			7#define newMine			8#define drone			9#define laser			10#define stunner			11#define lineTurret		1#define dotTurret		2#define noTurret		3#define kDuelBattle		1#define kGroupBattle	2#define kTeamBattle		3/* Types */typedef unsigned char BYTE;typedef struct macFeatures {				BYTE hasGestalt;				BYTE hasColorQD;				BYTE bitDepth;				BYTE hasWaitNextEvent;				BYTE hasCoprocessor;				BYTE hasStereoCapability;				BYTE hasSoundIO;				BYTE hasSoundDevice;				BYTE hasSpeech;				BYTE hasAppleEventManager;				BYTE hasGWorlds;				BYTE hasDragAndDrop;				BYTE hasFSSpecCalls; // has FileSpec system calls for file handling.			   } macFeatures;typedef struct library {				char name[20];				short code;				short real;				long  textPos;			   } library;			   typedef struct asmInfo {				long 	length;			/* length of source code */				short	codeLength;		/* length of object code */				short	numIcons;		/* number of icons created */				short	numSounds;		/* number of sounds created */				long	softDate;		/* date of software changes */				long	hardDate;		/* date of hardware changes */				long	asmDate;		/* date of last assembly */				long	iconDate;		/* date of last icon editing */				long	recordingDate;	/* date of last sound recordings */			   } asmInfo;typedef	struct	hardwareInfo {				 short energyMax;			/* Maximum amount of energy */				 short damageMax;			/* Maximum amount of damage */				 short shieldMax;			/* Maximum shield level for normal discharge */				 short processorSpeed;	/* Instructions per chronon */				 short gunType;			/* 0 rubber, 1 normal, 2 explosive */				 short missileFlag;		/* 1 = has missiles */				 short tacNukeFlag;		/* 1 = has tacNukes */				 short advantages;		/* Number of points */				 short laserFlag;		/* 1 = lasers */				 short hellboreFlag;	/* 1 = hellbore */				 short droneFlag; 		/* 1 = drone */				 short mineFlag;		/* 1 = mine */				 short stunnerFlag;		/* 1 = stunner */				 short noNegEnergy;		/* 1 = No Negative energy */				 short probeFlag;		/* 1 = probes */				 short deathIconFlag;	/* 1 = use icon for death */				 short collisionIconFlag;	/* 1 = use icon for collision */				 short shieldHitIconFlag;	/* 1 = use icon for shield hit */				 short hitIconFlag;			/* 1 = use icon for hit */						 short shieldOnIconFlag;	/* 1 = use icon for shieldon */				} hardwareInfo;				typedef struct interruptStruct {				short proc;             /* Address of procedure to handle interrupt (-1 = none) */				short param; 			/* Any parameter related to interrupt */				short old;				/* Old value of condition being tested */				} intr;				typedef struct intqueueStruct {			/* Pending interrupts, in order of priority */				BYTE numPending;				BYTE collision;				BYTE wall;				BYTE damage;				BYTE shield;				BYTE top;				BYTE bot;				BYTE left;				BYTE right;				BYTE teammates;				BYTE robots;				BYTE signal;} intqueue;typedef struct robot {				short 	number;					// Robot ID.				short 	friend;				BYTE 	alive;				BYTE 	icon;				short 	team;					/* Team number, 0 = no team */				short 	stunned;				/* Number of chronons stunned, or 0 for functioning */				short 	intmask;              	/* 1 = interrupts enabled */						long	killTime[6];			// Time which eacxh Robot Was Killed				short 	kills;					/* Number of kills this robot has made */				short 	svrl;					// Num Of servival Points this Bot has made				short 	killer;					/* Robot which killed this robot (or -1) */				short	hit;					/* 1 = shield hit, 2 = robot hit */				short	haveDoneMoveOrShootQ;								long 	deathTime;								Str255 	name; 				/* P-string */				char 	password[20];			/* Robot's password */				BYTE 	passwordEntered;		/* 1 = password has been correctly done */				short 	*prog;				short 	stack[stackSize+1];				short 	progPtr;				short 	stackPtr;				short 	progSize;				hardwareInfo hardware;				short 	vRefNum;				/* for file manager calls */				CGrafPtr gw[10];			/* graphic Worlds for robot icons*/ //--- 19 apr 97				short 	turretType;			/* lineTurret, dotTurret, noTurret */				Handle 	sounds[10];								short energy;				short shield;				short aim;				short speedX;				short speedY;				short damage;				short channel;				short look;				short scan;				short collision;				short wall;				short letters[26];				short vector[101];			/* Parameters for probe and history registers */				intqueue intq;				/* Queue of pending interrupts */				intr collisionInt;			/* Procedure for collision interrupts */				intr wallInt;				/* Procedure for wall interrupts */				intr damageInt;				/* Procedure for damage interrupts */				intr rangeInt;  	 		/* Procedure for range interrupts */				intr radarInt;				intr shieldInt;				intr topInt;				intr botInt;				intr leftInt;				intr rightInt;				intr teammatesInt;				intr robotsInt;				intr signalInt;				intr chrononInt;				short probeParam;					short 	historyParam;				short 	history[historySize]; /* History registers */} robot;typedef struct shot {				double xPos;				double yPos;				short xPosInt;				short yPosInt;				double xAngle; 				/* Used as timer for TacNukes */				double yAngle;				BYTE type;				BYTE gunType; 								short energy;				BYTE soundFlag;				/* Play sound if soundFlag is set */				short owner;				/* Who shot this bullet? */				struct shot *next;			   } shot;			   typedef struct individualRoster {				char name[80];				short vRefNum;				long soloScore;				long groupScore;				long numGroupFights;				short winnerCircle;				long soloFinal;				long groupFinal;} individualRoster;typedef struct teamRoster {				char name1[80];				char name2[80];				short vRefNum1;				short vRefNum2;				long score;} teamRoster;#pragma mark prefStruct// --- Struct used for prefs in resourcetypedef struct prefStruct {	short 		version;	short 		displayCode;	short 		soundFlag;	short 		battleSpeed;	short 		maxPoints;	long 		code;	char 		registered[80];	short		createTournyLogQ;	short		showBugyRobotDialogQ;	short  		syntaxColoringQ;	RGBColor  	commentColor;	RGBColor	labelColor;	RGBColor	mainTextColor;	long		tournyCreatorType;	short		showMoveAndShootAlert;	short		rules_noMoveShoot;	short		rules_noLazers;	short		rules_noDrones;} prefStruct;/*typedef struct LabelItem {	unsigned char	name[20];	long			pos;	Ptr				next;	Ptr				prev;	} LabelItem;typedef LabelItem*	LabelList;*///typedef struct RWGlobalStruct{//	prefStruct	prefs;//} RWGlobalStruct;