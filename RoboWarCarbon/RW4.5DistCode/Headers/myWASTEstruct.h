typedef struct WERec *WEPtr, **WEHandle;typedef struct WEObjectDesc **WEObjectDescHandle;typedef struct WETextStyle{	SInt16 tsFont;					// font family number	Style tsFace;					// set of Quickdraw styles	UInt8 tsFlags;					// flags (FOR INTERNAL USE ONLY)	SInt16 tsSize;					// font size, in integer points	RGBColor tsColor;				// absolute red-green-blue color#if WASTE_OBJECTS	WEObjectDescHandle tsObject;	// embedded object reference#endif} WETextStyle;typedef struct WERunAttributes{	SInt16 runHeight;			// style run height (ascent + descent + leading)	SInt16 runAscent;			// font ascent	WETextStyle runStyle;		// text style} WERunAttributes;typedef struct WERunInfo{	SInt32 runStart;			// byte offset to first character of this style run	SInt32 runEnd;				// byte offset to first character of next style run	WERunAttributes runAttrs;	// run attributes} WERunInfo;typedef struct QDEnvironment{	GrafPtr envPort;	PenState envPen;	WETextStyle envStyle;	SInt16 envMode;} QDEnvironment;typedef struct WERunArrayEntry{	SInt32 runStart;			// offset to first character in style run	SInt32 styleIndex;			// index into style table} WERunArrayEntry, **WERunArrayHandle;typedef struct TERunAttributes{	SInt16 runHeight;	SInt16 runAscent;	TextStyle runTEStyle;} TERunAttributes;typedef struct TEStyleScrapElement{	SInt32 scrpStartChar;	TERunAttributes scrpTEAttrs;} TEStyleScrapElement;typedef struct TEStyleScrap{	SInt16 scrpNStyles;	TEStyleScrapElement scrpStyleTab[ kVariableLengthArray ];} TEStyleScrap, **TEStyleScrapHandle;typedef struct WEStyleTableEntry{	SInt32 refCount;			// reference count	WERunAttributes info;		// style information} WEStyleTableEntry, **WEStyleTableHandle;typedef struct WELineRec{	SInt32 lineStart;			// byte offset to first character in line	SInt32 lineOrigin;			// pixel offset from destRect.top	SInt16 lineAscent;			// maximum font ascent for this line	SInt16 lineSlop;			// extra pixels needed to fill up the line	Fixed lineJustAmount;		// normalized slop value, used for justification} WELineRec, **WELineArrayHandle;typedef struct WEAction{	WEHandle hOwner;			// handle to associated WE instance	struct WEAction **hNext;	// used to keep a linked list of actions	Handle hText;				// handle to saved text	Handle hStyles;				// handle to saved styles	Handle hSoup;				// handle to saved soup	SInt32 delRangeStart;		// start of range to delete	SInt32 delRangeLength;		// length of range to delete	SInt32 insRangeLength;		// lenfth of range to insert	SInt32 hiliteStart;			// start of range to hilite	SInt32 hiliteEnd;			// end of range to hilite	WEActionKind actionKind;	// identifies event that caused this action to be pushed	WEActionFlags actionFlags;	// miscellaneous flags} WEAction, **WEActionHandle;// A WESoup record is a static description of an object embedded in the text.// The 'SOUP' data type is just a collection of WESoup records, each followed// by the corresponding object data.// This data type complements the standard TEXT/styl pair.typedef struct WESoup{	SInt32 soupOffset;			// insertion offset for this object	FlavorType soupType;		// 4-letter tag identifying object type	SInt32 soupReserved1;		// reserved for future use; set to zero	Size soupDataSize;			// size of object data following this record	Point soupSize;				// object height and width, in pixels	SInt32 soupReserved2;		// reserved for future use; set to zero} WESoup;typedef Boolean (*WESegmentLoopProcPtr)	(		WELineRec *pLine,		const WERunAttributes *pAttrs,		Ptr pSegment,		SInt32 segmentStart,		SInt32 segmentLength,		JustStyleCode styleRunPosition,		WEHandle hWE,		void *callbackData	);typedef FourCharCode WESelector;typedef struct WEFieldDescriptor{	SInt16 fOffset;	SInt16 fLength;} WEFieldDescriptor;typedef struct WELookupTable{	WESelector selector;	WEFieldDescriptor desc;} WELookupTable;typedef struct WEUserInfoEntry{	WESelector tag;	SInt32 info;} WEUserInfoEntry;typedef struct WEOHTableEntry{	FlavorType objectType;	WENewObjectUPP newHandler;	WEDisposeObjectUPP freeHandler;	WEDrawObjectUPP drawHandler;	WEClickObjectUPP clickHandler;	WEStreamObjectUPP streamHandler;	SInt32 refCon;} WEOHTableEntry, **WEOHTableHandle;typedef struct WEObjectDesc{	FlavorType objectType;				// 4-letter tag identifying object type	Handle objectDataHandle;			// handle to object data	Point objectSize;					// object height and width, in pixels	WEOHTableHandle objectTable;		// handle to object handler table	SInt32 objectIndex;					// index into object handler table	WEHandle objectOwner;				// handle to owner WE instance	SInt32 objectRefCon;				// free for use by object handlers} WEObjectDesc;typedef struct WERec{	GrafPtr port;							// graphics port text is drawn into	Handle hText;							// handle to the text	WELineArrayHandle hLines;				// handle to the line array	WEStyleTableHandle hStyles;				// handle to the style table	WERunArrayHandle hRuns;					// handle to the style run array	SInt32 textLength;						// length of text	SInt32 nLines;							// number of lines	SInt32 nStyles;							// number of unique styles in the style table	SInt32 nRuns;							// number of style runs	LongRect viewRect;						// view rectangle, all drawing is clipped to this	LongRect destRect;						// destination rectangle	SInt32 selStart;						// start of selection range	SInt32 selEnd;							// end of selection range	UInt32 flags;							// 32 bits of miscellaneous flags (private)	UInt32 features;						// 32 bit of feature flags (public)	UInt32 caretTime;						// time of most recent caret drawing, in ticks	UInt32 clickTime;						// time of most recent click, in ticks	SInt32 clickLoc;						// byte offset of most recent click	SInt32 anchorStart;						// start offset of anchor word/line	SInt32 anchorEnd;						// end offset of anchor word/line	char firstByte;							// first byte of a double-byte character	WEEdge clickEdge;						// edge of character hit by most recent click	UInt8 clickCount;						// multiple click count	WEAlignment alignment;					// alignment style	WEDirection direction;					// dominant line direction	SInt16 filler1;							// unused	GrafPtr offscreenPort;					// offscreen graphics world	RgnHandle viewRgn;						// handle to the view region	void *refCon;							// reference value for client use	Handle hUserInfo;						// more junk for client use	TSMDocumentID tsmReference;				// reference value for the text services manager	SInt32 tsmAreaStart;					// start of active input area (for TSM)	SInt32 tsmAreaEnd;						// end of active input area	DragReference currentDrag;				// reference of drag being tracked by _WEDrag	SInt32 dragCaretOffset;					// offset to caret displayed during a drag	WEActionHandle hActionStack;			// action stack for undo	UInt32 modCount;						// modification count	WEClickLoopUPP clickLoop;				// click loop callback	WEScrollUPP scrollProc;					// scroll callback	WETSMPreUpdateUPP tsmPreUpdate;			// TSM pre-update callback	WETSMPostUpdateUPP tsmPostUpdate;		// TSM post-update callback	WETranslateDragUPP translateDragHook;	// drag translation hook	WEHiliteDropAreaUPP hiliteDropAreaHook;	// drop area highlighting hook	WEDrawTextUPP drawTextHook;				// hook for drawing text	WEPixelToCharUPP pixelToCharHook;		// hook for hit-testing	WECharToPixelUPP charToPixelHook;		// hook for locating glyph position	WELineBreakUPP lineBreakHook;			// hook for finding line breaks	WEWordBreakUPP wordBreakHook;			// hook for finding word breaks	WECharByteUPP charByteHook;				// hook for finding character byte type	WECharTypeUPP charTypeHook;				// hook for finding character type	WEEraseUPP eraseHook;					// hook for erasing background	WEFluxUPP fluxProc;						// flux callback	WERunAttributes nullStyle;				// style for null selection	WEOHTableHandle hObjectHandlerTable;	// handle to object handler table for this instance	SInt32 translucencyThreshold;			// use translucent drags unless selection area exceeds this	StringHandle hURLHint;					// hint string for slack URLs} WERec;struct SLDrawData{	GrafPtr screenPort;	GDHandle screenDevice;	PixMapHandle offscreenPixels;	// offscreen pixel map	Rect bounds;					// bounds of offscreen buffer, in global coords	Rect lineRect;					// rect enclosing current line	Rect drawRect;					// visible portion of line rect	Boolean usingColor;				// true if drawing in color	Boolean usingOffscreen;			// true if an offscreen graphics world has been set up	Boolean drawingOffscreen;		// true if actually drawing to an offscreen buffer	Boolean doErase;				// true if line rectangle should be erased before drawing};struct SLCalcSlopData{	SInt16 lineWidth;	SInt16 totalSlop;	Fixed totalProportion;};struct SLPixelToCharData{	Fixed hPos;	Fixed pixelWidth;	SInt32 offset;	WEEdge edge;};struct SLCharToPixelData{	LongPt *thePoint;	SInt32 offset;	SInt16 direction;	Boolean lineDir;	// is the line direction RL?	Boolean rightEdge;	// are we getting the right edge of the line?};struct SLCollectHiliteRgnData{	SInt32 rangeStart;	SInt32 rangeEnd;	SInt16 hPos;};struct SLCrossDirectionBoundaryData{	SInt32 oldOffset;		//	offset before crossing direction boundary	SInt32 newOffset;		//	offset after crossing direction boundary	Boolean movingRight;	//	moving insertion point to the right?	Boolean isDone;};struct FormatOrderData{	SInt32 firstRun;	WEHandle hWE;};